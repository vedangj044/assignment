a = [[0, 1, 1, 1],
     [1, 1, 1, 1],
     [1, 1, 1, 1],
     [1, 1, 1, 1]]

moves = []


def ava(position):
    l = []
    m = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]

    for i in m:
        b = tuple(map(sum, zip(position, i)))
        if 3 >= b[0] >= 0 and 3 >= b[1] >= 0:
            if a[b[0]][b[1]] == 1:
                l.append(b)
    return l


def solver(x, y, avaible):
    if x == 3 and y == 3:
        return 1

    if len(avaible) > 0:
        for i in avaible:
            if i not in moves:
                moves.append(i)
                return solver(i[0], i[1], ava((i[0], i[1])))

    if len(moves) > 0:
        moves.pop()
    if len(moves) > 0:
        preX = moves[-1][0]
        preY = moves[-1][1]
        return solver(preX, preY, ava((preX, preY))[1:])

    return 0

def start():
    print(solver(0, 0, ava((0, 0))))


    import sol

    w = 200

    def setup():
        size(1000, 800)


    def draw():
        x = 0
        y = 0
        for i in sol.a:
            for j in i:
                if j==0:
                    if y==0 and x==0:
                        fill(0, 255, 0)
                    else:
                        fill(128, 128, 128)
                elif j==1:
                    fill(255, 255, 255)
                else:
                    fill(0, j, 0)
                rect(x, y, 200, 200)
                x+=200
            y+=200
            x=0

    def mousePressed():
        if(mouseX<800):
            sol.a[mouseY/w][mouseX/w] = 0
        else:
            sol.start()
            print(sol.a)
            k = 255//len(sol.moves)
            z = 1
            for i in sol.moves:
                sol.a[i[0]][i[1]] = k*z
                z+=1
